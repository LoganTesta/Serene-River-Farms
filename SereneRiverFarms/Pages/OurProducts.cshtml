@page
@model SereneRiverFarms.Pages.OurProductsModel
@using System.Collections;   @*For ArrayLists*@
@using Microsoft.AspNetCore.Http;   @*For Sessions*@

@{
    @using Microsoft.AspNetCore.Html;

    ViewData["Title"] = "Our Products";
    var contactResponse = ViewData["Message"];
    var searchResponse = ViewData["SearchProductsMessage"];
    var searchCategory = "" + HttpContext.Session.GetString("searchCategory");
    var orderBy = "" + HttpContext.Session.GetString("orderBy");

    List<product> products = SereneRiverFarms.Program.products;
    List<product> reorderedProducts = new List<product>();
    List<product> finalProducts = new List<product>();


    List<int> numberOfEachProduct = new List<int>();
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfPears"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfApples"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfBlueberries"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfStrawberries"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfRaspberries"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfCherries"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfPumpkins"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfMilkGallons"]));
    numberOfEachProduct.Add(Convert.ToInt32(ViewData["numberOfJamJars"]));

    List<int> numberOfEachProductReordered = new List<int>();

    List<string> subtotalOfEachProduct = new List<string>();
    subtotalOfEachProduct.Add("" + ViewData["subtotalPears"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalApples"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalBlueberries"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalStrawberries"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalRaspberries"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalCherries"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalPumpkins"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalMilkGallons"]);
    subtotalOfEachProduct.Add("" + ViewData["subtotalJamJars"]);


    int numberOfItems = Convert.ToInt32(ViewData["numberOfItems"]);
    var cartTotal = ViewData["cartTotal"];
}

@{
    //If requested order listings.
    if (orderBy == "name")
    {
        reorderedProducts = products.OrderBy(product => product.name).ToList();
    }
    else if (orderBy == "name (reverse)")
    {
        reorderedProducts = products.OrderByDescending(product => product.name).ToList();
    }
    else if (orderBy == "price")
    {
        reorderedProducts = products.OrderBy(product => product.price).ToList();
    }
    else if (orderBy == "price (reverse)")
    {
        reorderedProducts = products.OrderByDescending(product => product.price).ToList();
    }
    else
    {
        reorderedProducts = products;
    }

    for (var i = 0; i < reorderedProducts.Count; i++)
    {
        if (reorderedProducts[i].displayCSS == "")
        {
            finalProducts.Add(reorderedProducts[i]);
        }
    }


    for (var i = 0; i < finalProducts.Count; i++)
    {
        if (orderBy == "")
        {
            numberOfEachProductReordered.Add(numberOfEachProduct[i]);
        }
        else
        {
            numberOfEachProductReordered.Add(numberOfEachProduct[Convert.ToInt32(finalProducts[i].classInt)]);
        }
    }

}

<div class="shopping-cart">
    @{
        if (@numberOfItems > 0)
        {
            <div class="shopping-cart__image show">
                <a class="shopping-cart__link" href="#estimateCartContentRow">
                    <div class="shopping-cart__number-of-items">@numberOfItems</div>
                </a>
            </div>
        }
    }
</div>

<div class="content-row no-content-row-padding">
    <div class="col-sma-5 page-content">
        <div class="subtitle-container">
            <h2 class="subtitle-container__subtitle">Our Products</h2>
            <div class="subheader-divider"></div>
            <div class="subtitle-container__note"> *** All products while available, some are seasonal.</div>
        </div>
    </div>
    <div class="col-sma-7 page-content">
        <div class="product-search">
            <h3>Search Products</h3>
            <form class="form search-form" id="searchForm" name="searchForm" method="get">
                <div class="search-form__input-container">
                    <label class="search-form__label" for="searchCategory">Category</label>
                    <select id="searchCategory" class="search-form__input" type="text" name="searchCategory">
                        <option value=""></option>
                        <!option value="fruits" @(@searchCategory == "fruits" ? "selected" : "")>Fruits</!option>
                        <!option value="veggies" @(@searchCategory == "veggies" ? "selected" : "")>Veggies</!option>
                        <!option value="squashes" @(@searchCategory == "squashes" ? "selected" : "")>Squash</!option>
                        <!option value="baked goods" @(@searchCategory == "baked goods" ? "selected" : "")>Baked Goods</!option>
                        <!option value="dairy" @(@searchCategory == "dairy" ? "selected" : "")>Dairy</!option>
                        <!option value="jams" @(@searchCategory == "jams" ? "selected" : "")>Jams</!option>
                        <!option value="other" @(@searchCategory == "other" ? "selected" : "")>Other</!option>
                    </select>
                    <div class="clear-both"></div>
                </div>
                <div class="search-form__input-container">
                    <label class="search-form__label" for="orderBy">Order By</label>
                    <select id="orderBy" class="search-form__input" type="text" name="orderBy">
                        <option value=""></option>
                        <!option value="name" @(@orderBy == "name" ? "selected" : "")>Name</!option>
                        <!option value="name (reverse)" @(@orderBy == "name (reverse)" ? "selected" : "")>Name (reverse)</!option>
                        <!option value="price" @(@orderBy == "price" ? "selected" : "")>Price</!option>
                        <!option value="price (reverse)" @(@orderBy == "price (reverse)" ? "selected" : "")>Price (reverse)</!option>
                    </select>
                    <div class="clear-both"></div>
                </div>
                <div class="search-form__input-container">
                    <input asp-page-handler="SearchProductsSection" id="searchButton" class="form__submit-button button-container" name="searchButton" value="Search" />
                    <div class="form__errors"></div>
                </div>
            </form>
            @{
                <div class="product-search__text">
                    @searchResponse
                </div>
            }
        </div>
    </div>
</div>

<div class="content-row product-quantities">
    <div class="col-sma-12">
        @for (var i = 0; i < products.Count; i++)
        {
            <div class="product-quantities-hidden">@numberOfEachProduct[i]</div>
        }
    </div>
</div>

<div class="content-row small-content-row-padding-top products">
    @for (var i = 0; i < finalProducts.Count; i++)
    {
        <div class="col-vsm-6 col-sma-4 col-lar-3 product @finalProducts[i].classCSS @finalProducts[i].classInt @finalProducts[i].displayCSS">
            <div class="product__header">
                <h3 class="product__name">@finalProducts[i].namePlural</h3>
            </div>
            <div class="product__bg-image"></div>
            <div class="product__description">@finalProducts[i].description</div>
            <div class="product__price">$@finalProducts[i].price/lb</div>
            <div class="product__quantity">
                @{
                    if (@numberOfEachProductReordered[i] > 0)
                    {
                        <a href="#estimateCartContentRow" class="product__quantity-link">
                            @numberOfEachProductReordered[i]
                        </a>
                    }
                }
            </div>
            <div class="product__add-container">
                <button class="product__minus-quantity">-</button>
                <label class="sr-only" for="product__input-quantity">Product Input Quantity</label>
                <input id="productInputQuantity" class="product__input-quantity" name="product__input-quantity" type="number" min="0" max="100" value="0" />
                <button class="product__add-quantity">+</button>
                <button class="product__add">Add to Cart</button>
                <div class="clear-both"></div>
            </div>
        </div>
    }
</div>

<div class="content-row" id="estimateCartContentRow">
    <div class="col-sma-5">
        <h3>Special Order: Request an Estimate from Our Farm</h3>
        <div>
            <p>
                How it Works: Simply click and add the products you wish to order, and submit your total to us with any notes.
                We'll get back to you with an estimate, including Shipping + Handling, within 2 business days via email.
                We ship produce and dairy within a 50 mile radius, jams we ship anywhere in the continental U.S.
            </p>
        </div>
        <div class="javascript-validation-results-contact-us"></div>

        @{
            <div class="form-response">
                @(new HtmlString("" + @contactResponse))
            </div>
        }

        <form class="form estimate-form" id="estimateForm" name="estimateForm" onsubmit="return validateEstimateForm();" method="post">
            <div class="form__required">** - Required Field</div>
            <div class="form__input-container">
                <label class="form__label" for="userName">Your Name **</label>
                <input id="userName" class="form__input" type="text" name="userName" />
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <label class="form__label" for="userEmail">Email **</label>
                <input id="userEmail" class="form__input" type="text" name="userEmail" />
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <label class="form__label" for="userPhone">Phone (10 digits, only numbers) **</label>
                <input id="userPhone" class="form__input" type="tel" name="userPhone" />
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <label class="form__label" for="userAddress">Address **</label>
                <input id="userAddress" class="form__input" type="text" name="userAddress" />
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <label class="form__label" for="userCity">City **</label>
                <input id="userCity" class="form__input" type="text" name="userCity" />
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <label class="form__label" for="userState">State **</label>
                <select id="userState" class="form__input" type="text" name="userState">
                    <option value=""></option>
                    <option value="AL">AL</option>
                    <option value="AZ">AZ</option>
                    <option value="AR">AR</option>
                    <option value="CA">CA</option>
                    <option value="CO">CO</option>
                    <option value="CT">CT</option>
                    <option value="DE">DE</option>
                    <option value="FL">FL</option>
                    <option value="GA">GA</option>
                    <option value="ID">ID</option>
                    <option value="IL">IL</option>
                    <option value="IN">IN</option>
                    <option value="IA">IA</option>
                    <option value="KS">KS</option>
                    <option value="KY">KY</option>
                    <option value="LA">LA</option>
                    <option value="ME">ME</option>
                    <option value="MD">MD</option>
                    <option value="MA">MA</option>
                    <option value="MI">MI</option>
                    <option value="MN">MN</option>
                    <option value="MS">MS</option>
                    <option value="MO">MO</option>
                    <option value="MT">MT</option>
                    <option value="NE">NE</option>
                    <option value="NV">NV</option>
                    <option value="NH">NH</option>
                    <option value="NJ">NJ</option>
                    <option value="NM">NM</option>
                    <option value="NY">NY</option>
                    <option value="NC">NC</option>
                    <option value="ND">ND</option>
                    <option value="OH">OH</option>
                    <option value="OK">OK</option>
                    <option value="OR">OR</option>
                    <option value="PA">PA</option>
                    <option value="RI">RI</option>
                    <option value="SC">SC</option>
                    <option value="SD">SD</option>
                    <option value="TN">TN</option>
                    <option value="TX">TX</option>
                    <option value="UT">UT</option>
                    <option value="VT">VT</option>
                    <option value="VA">VA</option>
                    <option value="WA">WA</option>
                    <option value="DC">DC</option>
                    <option value="WV">WV</option>
                    <option value="WI">WI</option>
                    <option value="WU">WY</option>
                </select>
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <label class="form__label" for="userZipCode">ZIP Code **</label>
                <input id="userZipCode" class="form__input" type="text" name="userZipCode" />
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <label class="form__label" for="additionalNotes">Additional Notes </label>
                <textarea id="additionalNotes" class="form__input form__textarea" name="additionalNotes"></textarea>
                <div class="clear-both"></div>
            </div>
            <div class="form__input-container">
                <input asp-page-handler="EstimateSection" id="submitEstimateButton" class="form__submit-button button-container estimate" type="submit" name="submitButton" value="Submit Estimate!" />
                <div class="form__errors"></div>
            </div>
        </form>
    </div>
    <div class="col-sma-7">
        <div class="estimate-container">
            <div class="estimate-container__header">
                <div class="estimate-cart__total">Total: @cartTotal</div>
                <div class="reset-all">Reset All</div>
            </div>
            <table id="estimateTable" class="item-table">
                <thead>
                    <tr>
                        <th class="item__names">Name</th>
                        <th class="item__photos">Photo</th>
                        <th class="item__approximate-prices">Price</th>
                        <th class="item__quantities">Qty.</th>
                        <th class="item__approximate-subtotals">Subtotal</th>
                        <th class="item__minus-icons">Remove</th>
                        <th class="item__add-icons">Add</th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < products.Count; i++)
                    {
                        <tr class="item @products[i].classCSS @(@numberOfEachProduct[i] <= 0 ? "hide" : "")">
                            <td class="item__name">@products[i].namePlural</td>
                            <td class="item__photo"><div class="item__photo-image"></div></td>
                            <td class="item__approximate-price">$@products[i].price</td>
                            <td class="item__quantity">@numberOfEachProduct[i]</td>
                            <td class="item__approximate-subtotal">@subtotalOfEachProduct[i]</td>
                            <td class="item__minus"><div class="item__minus__item">-</div></td>
                            <td class="item__add"><div class="item__add__item">+</div></td>
                        </tr>
                    }
                    <tr class="clear-both"></tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {
        setCurrentPage(2, "#mobileNav", ".nav__nav-link");
        setCurrentPage(2, "#desktopNav", ".nav__nav-link");
    });
</script>

<script type="text/javascript" src="assets/javascript/our-products-validation.js?mod=11212019"></script>

<script type="text/javascript">
    let numberOfProducts = $(".product").length;

    //Add search products event listeners.
    $("#searchButton").on("click", function () {
        let searchCategory = $("#searchCategory").val();
        let orderBy = $("#orderBy").val();
        updateProductsShown("SearchCategory=" + searchCategory, "OrderBy=" + orderBy);
    });


    //Add product event listeners
    for (let i = 0; i < numberOfProducts; i++) {
        $(".product__minus-quantity").eq(i).on("click", function () {
            adjustProductSetQuantity(i, "decrease");
        });

        $(".product__add-quantity").eq(i).on("click", function () {
            adjustProductSetQuantity(i, "increase");
        });

        $(".product__add").eq(i).on("click", function () {
            let itemNumber = $(".product").eq(i).attr("class").split(" ")[5];
            let itemQuantity = $(".product__input-quantity").eq(i).val();
            setCartQuantity("SetItemQuantity", itemNumber, itemQuantity);
        });
    }


    //Add cart event listeners
    for (let i = 0; i < numberOfProducts; i++) {
        $(".item__minus__item").eq(i).on("click", function () {
            updateCart("MinusItem", i);
        });

        $(".item__add__item").eq(i).on("click", function () {
            updateCart("AddItem", i);
        });
    }


    $(".reset-all").eq(0).on("click", function () {
        resetCart("ResetCart", -1);
    });



    function adjustProductSetQuantity(itemNumber, change) {
        if (change === "decrease") {
            let newValue = "" + (parseInt($(".product__input-quantity").eq(itemNumber).val()) - 1);
            if (0 <= newValue && newValue <= 100) {
                $(".product__input-quantity").eq(itemNumber).val(newValue);
            }
        } else if (change === "increase") {
            let newValue = "" + (parseInt($(".product__input-quantity").eq(itemNumber).val()) + 1);
            if (0 <= newValue && newValue <= 100) {
                $(".product__input-quantity").eq(itemNumber).val(newValue);
            }
        }
    }

    function updateProductsShown(searchByCategoryString, orderByString) {
        $.ajax({
            method: "GET",
            url: "/OurProducts?handler=SearchProductsSection&" + searchByCategoryString + "&" + orderByString,
            data: '',
            success: function (response) {
                let parser = new DOMParser();
                let ajaxDocument = parser.parseFromString(response, "text/html");

                let productSearch = ajaxDocument.getElementsByClassName("product-search")[0];
                let productQuantities = ajaxDocument.getElementsByClassName("product-quantities")[0];
                let products = ajaxDocument.getElementsByClassName("products")[0];
                let itemTable = ajaxDocument.getElementsByClassName("item-table")[0];
                let shoppingCart = ajaxDocument.getElementsByClassName("shopping-cart")[0];
                let estimateCartTotal = ajaxDocument.getElementsByClassName("estimate-cart__total")[0];


                $(".product-search").eq(0).html(productSearch.innerHTML);
                $(".product-quantities").eq(0).html(productQuantities.innerHTML);
                $(".products").eq(0).html(products.innerHTML);
                $(".item-table").eq(0).html(itemTable.innerHTML);
                $(".shopping-cart").eq(0).html(shoppingCart.innerHTML);
                $(".estimate-cart__total").eq(0).html(estimateCartTotal.innerHTML);

                reAddEventListenersAfterSearching();
            }
        });
    }

    function setCartQuantity(actionString, itemID, itemQuantity) {
        $.ajax({
            method: "GET",
            url: "/OurProducts?handler=" + actionString + "&item=" + itemID + "&itemQuantity=" + itemQuantity,
            data: '',
            success: function (response) {
                let parser = new DOMParser();
                let ajaxDocument = parser.parseFromString(response, "text/html");

                let productQuantities = ajaxDocument.getElementsByClassName("product-quantities")[0];         
                let itemTable = ajaxDocument.getElementsByClassName("item-table")[0];
                let shoppingCart = ajaxDocument.getElementsByClassName("shopping-cart")[0];
                let estimateCartTotal = ajaxDocument.getElementsByClassName("estimate-cart__total")[0];


                $(".product-quantities").eq(0).html(productQuantities.innerHTML);
                $(".item-table").eq(0).html(itemTable.innerHTML);
                $(".shopping-cart").eq(0).html(shoppingCart.innerHTML);
                $(".estimate-cart__total").eq(0).html(estimateCartTotal.innerHTML);

                let numberOfProductsShown = $(".product").length;
                for (let i = 0; i < numberOfProductsShown; i++) {
                    let productQuantity = ajaxDocument.getElementsByClassName("product__quantity")[i];
                    $(".product__quantity").eq(i).html(productQuantity.innerHTML);
                }

                reAddEventListeners();
            }
        });
    }

    function updateCart(actionString, itemID) {
        $.ajax({
            method: "GET",
            url: "/OurProducts?handler=" + actionString + "&item=" + itemID,
            data: '',
            success: function (response) {
                let parser = new DOMParser();
                let ajaxDocument = parser.parseFromString(response, "text/html");

                let productQuantities = ajaxDocument.getElementsByClassName("product-quantities")[0];
                let itemTable = ajaxDocument.getElementsByClassName("item-table")[0];
                let shoppingCart = ajaxDocument.getElementsByClassName("shopping-cart")[0];
                let estimateCartTotal = ajaxDocument.getElementsByClassName("estimate-cart__total")[0];

                $(".product-quantities").eq(0).html(productQuantities.innerHTML);
                $(".item-table").eq(0).html(itemTable.innerHTML);
                $(".shopping-cart").eq(0).html(shoppingCart.innerHTML);
                $(".estimate-cart__total").eq(0).html(estimateCartTotal.innerHTML);

                let numberOfProductsShown = $(".product").length;
                for (let i = 0; i < numberOfProductsShown; i++) {
                    let productQuantity = ajaxDocument.getElementsByClassName("product__quantity")[i];
                    $(".product__quantity").eq(i).html(productQuantity.innerHTML);
                }

                reAddEventListeners();
            }
        });
    }

    function resetCart(actionString, itemID) {
        $.ajax({
            method: "GET",
            url: "/OurProducts?handler=" + actionString + "&item=" + itemID,
            data: '',
            success: function (response) {
                let parser = new DOMParser();
                let ajaxDocument = parser.parseFromString(response, "text/html");

                let productQuantities = ajaxDocument.getElementsByClassName("product-quantities")[0];
                let itemTable = ajaxDocument.getElementsByClassName("item-table")[0];
                let shoppingCart = ajaxDocument.getElementsByClassName("shopping-cart")[0];
                let estimateCartTotal = ajaxDocument.getElementsByClassName("estimate-cart__total")[0];

                $(".product-quantities").eq(0).html(productQuantities.innerHTML);
                $(".item-table").eq(0).html(itemTable.innerHTML);
                $(".shopping-cart").eq(0).html(shoppingCart.innerHTML);
                $(".estimate-cart__total").eq(0).html(estimateCartTotal.innerHTML);

                let numberOfProductsShown = $(".product").length;
                for (let i = 0; i < numberOfProductsShown; i++) {
                    document.getElementsByClassName("product__quantity")[i].innerHTML = "";
                }

                reAddEventListeners();
            }
        });
    }

    function reAddEventListenersAfterSearching() {
        //Add search products event listeners.
        $("#searchButton").on("click", function () {
            let searchCategory = $("#searchCategory").val();
            let orderBy = $("#orderBy").val();
            updateProductsShown("SearchCategory=" + searchCategory, "OrderBy=" + orderBy);
        });


        //Add product event listeners
        for (let i = 0; i < numberOfProducts; i++) {
            $(".product__minus-quantity").eq(i).on("click", function () {
                adjustProductSetQuantity(i, "decrease");
            });

            $(".product__add-quantity").eq(i).on("click", function () {
                adjustProductSetQuantity(i, "increase");
            });

            $(".product__add").eq(i).on("click", function () {
                let itemNumber = $(".product").eq(i).attr("class").split(" ")[5];
                let itemQuantity = $(".product__input-quantity").eq(i).val();
                setCartQuantity("SetItemQuantity", itemNumber, itemQuantity);
            });
        }


        //Add cart event listeners.
        for (let i = 0; i < numberOfProducts; i++) {
            $(".item__minus__item").eq(i).on("click", function () {
                updateCart("MinusItem", i);
            });

            $(".item__add__item").eq(i).on("click", function () {
                updateCart("AddItem", i);
            });
        }
    }


    //Recreate event listeners for - and + buttons.
    function reAddEventListeners() {

        //Add cart event listeners.
        for (let i = 0; i < numberOfProducts; i++) {
            $(".item__minus__item").eq(i).on("click", function () {
                updateCart("MinusItem", i);
            });

            $(".item__add__item").eq(i).on("click", function () {
                updateCart("AddItem", i);
            });
        }
    }


    $("#submitEstimateButton").on("click", submitEstimateButtonUpdatePage);

    function submitEstimateButtonUpdatePage() {
        event.preventDefault();
        $.ajax({
            method: "POST",
            url: "/OurProducts?handler=EstimateSection",
            data: '' + $('form').serialize(),
            success: function (response) {
                let parser = new DOMParser();
                let ajaxDocument = parser.parseFromString(response, "text/html");

                let formResponse = ajaxDocument.getElementsByClassName("form-response")[0];

                $(".form-response").eq(0).html(formResponse.innerHTML);
            }
        });
    }
</script>
